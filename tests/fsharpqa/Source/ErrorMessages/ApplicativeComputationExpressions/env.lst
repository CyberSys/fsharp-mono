	SOURCE=E_DoBangInLetBangAndBangBlock.fs             SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # do! in a let! ... and! ... block
	SOURCE=E_LetBangAfterAndBang.fs                     SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # let! anfter an and!
	SOURCE=E_LetBetweenAndBangAndReturn.fs              SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # let between and! and return
	SOURCE=E_LetBetweenLetBangAndAndBang.fs             SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # let between let! and and!
	SOURCE=E_MoreAfterReturn.fs                         SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # Extra stuff after return
	SOURCE=E_PatternOnLhsOfUseBangAndUseBangBinding.fs  SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # Pattern matching in a use!/anduse! binding
	SOURCE=E_YieldInsteadOfReturn.fs                    SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # yield instead of return
	SOURCE=E_NoReturn.fs                                SCFLAGS="-r:builderlib.dll -g --optimize-" COMPILE_ONLY=1 PRECMD="\$FSC_PIPE --target:library builderlib.fs" # No return after let! ... and! ...
